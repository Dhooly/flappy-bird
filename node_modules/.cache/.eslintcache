[{"/home/daniel/javascript/React-projects/flappy-bird/src/index.tsx":"1","/home/daniel/javascript/React-projects/flappy-bird/src/App.tsx":"2"},{"size":268,"mtime":1672633335981,"results":"3","hashOfConfig":"4"},{"size":8998,"mtime":1673044086618,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jbokue",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/home/daniel/javascript/React-projects/flappy-bird/src/index.tsx",[],[],"/home/daniel/javascript/React-projects/flappy-bird/src/App.tsx",["13","14","15","16","17","18","19","20","21"],[],"import { useRef, useState, useEffect } from 'react'\nimport './App.css'\n\nconst GRAVITY = 0.5\n\nconst onStartup = () => {\n  // Check for local storage\n  if (localStorage.getItem('fb-best') !== null) {\n    return +JSON.parse(localStorage.getItem('fb-best')!)\n  }\n\n  return 0\n}\n\nfunction App() {\n  // state\n  const intervalId = useRef<NodeJS.Timer | null>(null)\n  const canvasRef = useRef<HTMLCanvasElement | null>(null)\n  const [position, setPosition] = useState(300)\n  const [score, setScore] = useState<number>(0)\n  const [best, setBest] = useState<number>(onStartup())\n  const [deltaY, setDeltaY] = useState(GRAVITY)\n  const [baseX, setBaseX] = useState(0)\n  const [pipe1X, setPipe1X] = useState(500)\n  const [pipe2X, setPipe2X] = useState(500)\n  const [randHeight1, setRandHeight1] = useState(0)\n  const [randHeight2, setRandHeight2] = useState(150)\n  const [startGame, setStartGame] = useState(false)\n  const [gameOver, setGameOver] = useState(false)\n  \n\n  useEffect(() => {\n      // Default canvas startup\n      if (canvasRef.current) {\n        const ctx = canvasRef.current.getContext('2d')\n\n        if (ctx) {\n          const bgImage = document.getElementById('bg') as HTMLCanvasElement\n          const base = document.getElementById('base') as HTMLCanvasElement\n          const message = document.getElementById('msg') as HTMLCanvasElement\n          // const birdImage = document.getElementById('bird-mf') as HTMLCanvasElement\n          ctx?.clearRect(0, 0, window.innerWidth, window.innerHeight)\n          // draw background\n          ctx?.drawImage(bgImage, 0, -50, bgImage.width * 10, bgImage.height * 1.5)\n          // draw bases and connect them\n          ctx?.drawImage(base, baseX, 550)\n          ctx?.drawImage(base, baseX + 336, 550)\n          // Draw tap message\n          ctx?.save()\n          ctx?.scale(1.25, 1.25)\n          ctx?.drawImage(message, 100, 100)\n          ctx?.restore()\n        }\n      }\n  }, [])\n\n\n  useEffect(() => {\n    // Start counter once user starts or resets game\n    if (startGame) {\n      intervalId.current = setInterval(() => runGame(), 16)\n    }\n\n    return () => {\n      if (intervalId.current) {\n        clearInterval(intervalId.current)\n      }\n    }\n  }, [startGame, position, deltaY])\n\n  // Main animation loop\n  const runGame = () => {\n    if (position <= 525 && !gameOver) {\n      if (canvasRef.current) {\n        const ctx = canvasRef.current.getContext('2d')\n\n        if (ctx) {\n          // Grab images\n          const bgImage = document.getElementById('bg') as HTMLCanvasElement\n          const base = document.getElementById('base') as HTMLCanvasElement\n          const pipe = document.getElementById('pipe') as HTMLCanvasElement\n          let birdImage\n          ctx?.clearRect(0, 0, window.innerWidth, window.innerHeight)\n          ctx?.drawImage(bgImage, 0, -50, bgImage.width * 10, bgImage.height * 1.5)\n\n          // Render different bird image based on its deltaY\n          if (deltaY > 7) {\n            birdImage = document.getElementById('bird-df') as HTMLCanvasElement\n          } else if (deltaY < 7 && deltaY > 0) {\n            birdImage = document.getElementById('bird-mf') as HTMLCanvasElement\n          } else {\n            birdImage = document.getElementById('bird-uf') as HTMLCanvasElement\n          }\n          // Rotate bird based on its deltaY\n          ctx?.save()\n          ctx?.translate(180 + (35 * (14 / 9)) / 2, position + 35 / 2)\n          ctx?.rotate(deltaY / -15)\n          ctx?.drawImage(birdImage, -(35 * (14 / 9)) / 2, -35 / 2, 35 * (14 / 9), 35)\n          ctx?.restore()\n\n          \n          // Render pipe as long as its on the screen\n          if (pipe1X > -100) {\n            ctx?.save()\n            ctx?.scale(1.5, 1.5)\n            ctx?.translate(pipe1X + pipe.width / 2, pipe.height / 2)\n            ctx?.rotate(Math.PI)\n            ctx?.drawImage(pipe, -pipe.width / 2, -pipe.height / 2 + 125 + randHeight1)\n            ctx?.restore()\n\n            ctx?.save()\n            ctx?.scale(1.5, 1.5)\n            ctx?.drawImage(pipe, pipe1X, 300 - randHeight1)\n            ctx?.restore()\n          }\n\n          // Render pipe as long as its on the screen and 1st pipe is halfway down screen\n          if ((pipe1X < 350 || pipe2X < 300) && pipe2X > -100) {\n            ctx?.save()\n            ctx?.scale(1.5, 1.5)\n            ctx?.translate(pipe2X + pipe.width / 2, pipe.height / 2)\n            ctx?.rotate(Math.PI)\n            ctx?.drawImage(pipe, -pipe.width / 2, -pipe.height / 2 + 125 + randHeight2)\n            ctx?.restore()\n\n            ctx?.save()\n            ctx?.scale(1.5, 1.5)\n            ctx?.drawImage(pipe, pipe2X, 300 - randHeight2)\n            ctx?.restore()\n          }\n\n          // Ground loop\n          if (baseX <= -192) {\n            setBaseX(0)\n          }\n          ctx?.drawImage(base, baseX, 550)\n          ctx?.drawImage(base, baseX + 336, 550)\n        }\n      }\n\n      // Gravity for bird\n      setPosition((prevPos) => prevPos - deltaY)\n      // Set a terminal velocity\n      if (deltaY > -15) {\n        setDeltaY((prevDelX) => prevDelX - GRAVITY / 0.666)\n      }\n      // Set base speed\n      setBaseX((prevBaseX) => prevBaseX - GRAVITY * 8)\n      if (pipe1X > -100) {\n        setPipe1X((prevPipeX) => prevPipeX - GRAVITY * 5.3333)\n      } else {\n        setPipe1X(333)\n        setRandHeight1(Math.floor(Math.random() * 150))\n      }\n\n      // Once the first pipe is past the middle, start moving the 2nd pipe\n      if (pipe1X < 285 || pipe2X < 300) {\n        if (pipe2X > -100) {\n          setPipe2X((prevPipeX) => prevPipeX - GRAVITY * 5.33333)\n        } else {\n          setPipe2X(333)\n          setRandHeight2(Math.floor(Math.random() * 150))\n        }\n      }\n\n\n      // Increment score once bird passes through pipe\n      if (Math.round(pipe1X) === 129 || Math.round(pipe1X) === 130 || Math.round(pipe2X) === 129 || Math.round(pipe2X) === 130) {\n        if (score !== null) {\n          setScore(score + 1)\n        }\n      }\n\n\n      // Game over if birds x and y position cross pipe\n      if (Math.round(pipe1X) < 156 && Math.round(pipe1X) > 71) {\n        if (position > 415 - randHeight1 * 1.5) {\n          handleGameOver()\n        }\n\n        if (position < 295 - randHeight1 * 1.5) {\n          handleGameOver()\n        }\n      }\n\n      // Game over if birds x and y position cross pipe\n      if (Math.round(pipe2X) < 156 && Math.round(pipe2X) > 71) {\n        if (position > 415 - randHeight2 * 1.5) {\n          handleGameOver()\n        }\n\n        if (position < 295 - randHeight2 * 1.5) {\n          handleGameOver()\n        }\n      }\n\n\n    } else {\n      // Clear interval if game over\n      if (intervalId.current) {\n        clearInterval(intervalId.current)\n      }\n      handleGameOver()\n    }\n  }\n\n  const jump = () => {\n    // Set a cap to the height a user can jump\n    if (position > -100) {\n      // Set deltaY to positive number to make velocity positive\n      setDeltaY(GRAVITY * 20)\n      // Add deltaY to the position\n      setPosition((prevPos) => prevPos + deltaY)\n    }\n  }\n\n  const handleEvent = () => {\n    // Start the game on click if first run\n    if (!startGame && !gameOver) {\n      setStartGame(true)\n      setScore(0)\n    }\n\n    jump()\n  }\n\n  const handleGameOver = () => {\n    // Set new best\n    if (score > best) {\n      setBest(score)\n      localStorage.setItem('fb-best', JSON.stringify(score))\n    }\n    setStartGame(false)\n    setGameOver(true)\n    setPipe1X(500)\n    setPipe2X(500)\n  }\n\n  const handleReset = () => {\n      setStartGame(true)\n      setGameOver(false)\n      setScore(0)\n      setPosition(300)\n  }\n\n\n  return (\n    <div onKeyDown={handleEvent} onClick={handleEvent} className='game-wrapper'>\n      <img src={require('./images/background-day.png')} id='bg' width='50' style={{ display: 'none' }} />\n      <img src={require('./images/base.png')} id='base' width='50' style={{ display: 'none' }} />\n      <img src={require('./images/message.png')} id='msg' width='50' style={{ display: 'none' }} />\n      <img src={require('./images/pipe-green.png')} id='pipe' width='50' style={{ display: 'none' }} />\n      <img src={require('./images/yellowbird-upflap.png')} id='bird-uf' width='50' style={{ display: 'none' }} />\n      <img src={require('./images/yellowbird-midflap.png')} id='bird-mf' width='50' style={{ display: 'none' }} />\n      <img src={require('./images/yellowbird-downflap.png')} id='bird-df' width='50' style={{ display: 'none' }} />\n      <canvas ref={canvasRef} width={480} height={640} />\n      {startGame && <div className='score'>{score}</div>}\n      {gameOver &&\n        <div className='end-game-popup'>\n          <div className='game-over-scores'>\n            <div className='text'>SCORE:</div>\n            <div className='text'>{score}</div>\n            <br />\n            <div className='text'>BEST:</div>\n            <div className='text'>{best}</div>\n          </div>\n          <button className='restart' onClick={handleReset}>RESTART</button>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default App\n",{"ruleId":"22","severity":1,"message":"23","line":55,"column":6,"nodeType":"24","endLine":55,"endColumn":8,"suggestions":"25"},{"ruleId":"22","severity":1,"message":"26","line":69,"column":6,"nodeType":"24","endLine":69,"endColumn":35,"suggestions":"27"},{"ruleId":"28","severity":1,"message":"29","line":249,"column":7,"nodeType":"30","endLine":249,"endColumn":106},{"ruleId":"28","severity":1,"message":"29","line":250,"column":7,"nodeType":"30","endLine":250,"endColumn":98},{"ruleId":"28","severity":1,"message":"29","line":251,"column":7,"nodeType":"30","endLine":251,"endColumn":100},{"ruleId":"28","severity":1,"message":"29","line":252,"column":7,"nodeType":"30","endLine":252,"endColumn":104},{"ruleId":"28","severity":1,"message":"29","line":253,"column":7,"nodeType":"30","endLine":253,"endColumn":114},{"ruleId":"28","severity":1,"message":"29","line":254,"column":7,"nodeType":"30","endLine":254,"endColumn":115},{"ruleId":"28","severity":1,"message":"29","line":255,"column":7,"nodeType":"30","endLine":255,"endColumn":116},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'baseX'. Either include it or remove the dependency array.","ArrayExpression",["31"],"React Hook useEffect has a missing dependency: 'runGame'. Either include it or remove the dependency array.",["32"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"33","fix":"34"},{"desc":"35","fix":"36"},"Update the dependencies array to be: [baseX]",{"range":"37","text":"38"},"Update the dependencies array to be: [startGame, position, deltaY, runGame]",{"range":"39","text":"40"},[1925,1927],"[baseX]",[2204,2233],"[startGame, position, deltaY, runGame]"]